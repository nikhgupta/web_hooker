require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe PortalsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Portal. As you add validations to Portal, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    build(:portal).attributes
  }

  let(:invalid_attributes) {
    build(:portal).attributes.merge("title" => "   ")
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # PortalsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all portals as @portals" do
      portal = Portal.create! valid_attributes
      get :index, {}, valid_session
      expect(assigns(:portals)).to eq([portal])
    end
  end

  describe "GET #show" do
    it "assigns the requested portal as @portal" do
      portal = Portal.create! valid_attributes
      get :show, {:id => portal.to_param}, valid_session
      expect(assigns(:portal)).to eq(portal)
    end
  end

  describe "GET #new" do
    it "assigns a new portal as @portal" do
      get :new, {}, valid_session
      expect(assigns(:portal)).to be_a_new(Portal)
    end
  end

  describe "GET #edit" do
    it "assigns the requested portal as @portal" do
      portal = Portal.create! valid_attributes
      get :edit, {:id => portal.to_param}, valid_session
      expect(assigns(:portal)).to eq(portal)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Portal" do
        expect {
          post :create, {:portal => valid_attributes}, valid_session
        }.to change(Portal, :count).by(1)
      end

      it "assigns a newly created portal as @portal" do
        post :create, {:portal => valid_attributes}, valid_session
        expect(assigns(:portal)).to be_a(Portal)
        expect(assigns(:portal)).to be_persisted
      end

      it "redirects to the created portal" do
        post :create, {:portal => valid_attributes}, valid_session
        expect(response).to redirect_to(Portal.last)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved portal as @portal" do
        post :create, {:portal => invalid_attributes}, valid_session
        expect(assigns(:portal)).to be_a_new(Portal)
      end

      it "re-renders the 'new' template" do
        post :create, {:portal => invalid_attributes}, valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        build(:portal).attributes.merge("title" => "New Title")
      }

      it "updates the requested portal" do
        portal = Portal.create! valid_attributes
        put :update, {:id => portal.to_param, :portal => new_attributes}, valid_session
        portal.reload
        expect(portal.title).to eq "New Title"
      end

      it "assigns the requested portal as @portal" do
        portal = Portal.create! valid_attributes
        put :update, {:id => portal.to_param, :portal => valid_attributes}, valid_session
        expect(assigns(:portal)).to eq(portal)
      end

      it "redirects to the portal" do
        portal = Portal.create! valid_attributes
        put :update, {:id => portal.to_param, :portal => valid_attributes}, valid_session
        expect(response).to redirect_to(portal)
      end
    end

    context "with invalid params" do
      it "assigns the portal as @portal" do
        portal = Portal.create! valid_attributes
        put :update, {:id => portal.to_param, :portal => invalid_attributes}, valid_session
        expect(assigns(:portal)).to eq(portal)
      end

      it "re-renders the 'edit' template" do
        portal = Portal.create! valid_attributes
        put :update, {:id => portal.to_param, :portal => invalid_attributes}, valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested portal" do
      portal = Portal.create! valid_attributes
      expect {
        delete :destroy, {:id => portal.to_param}, valid_session
      }.to change(Portal, :count).by(-1)
    end

    it "redirects to the portals list" do
      portal = Portal.create! valid_attributes
      delete :destroy, {:id => portal.to_param}, valid_session
      expect(response).to redirect_to(portals_url)
    end
  end

  describe "ALL #route" do
    it "assigns the requested portal to @portal" do
      portal = Portal.create! valid_attributes
      get :route, {:id => portal.to_param}, valid_session
      expect(assigns(:portal)).to eq portal
    end

    it "responds to all primary http methods" do
      portal = Portal.create! valid_attributes
      submission = create :submission, portal: portal
      allow(request.env).to receive(:[]).and_call_original
      allow(request.env).to receive(:[]).with('HTTP_X_WEBHOOKER_SUBMISSION_ID').and_return submission.id
      request.class.const_get("HTTP_METHODS").select do |method|
        respond_to?(method.underscore)
      end.each do |method|
        send method.underscore, :route, {:id => portal.to_param}, valid_session
        expect(response).to be_accepted
      end
    end

    it "enqueues forwarding of current request to all destinations" do
      portal = Portal.create! valid_attributes
      submission  = create :submission, portal: portal, with_destinations: 3

      allow(request.env).to receive(:[]).and_call_original
      allow(request.env).to receive(:[]).with('HTTP_X_WEBHOOKER_SUBMISSION_ID').and_return submission.id
      expect(RequestForwardingJob).to receive(:perform_later).with(submission.id, Fixnum).thrice

      get :route, {:id => portal.to_param}, valid_session
    end

    it "responds with 404 Not Found without content if a submission was not created" do
      portal = Portal.create! valid_attributes
      get :route, {:id => portal.to_param}, valid_session
      expect(response).to be_not_found
    end

    it "responds with 404 Not Found without content if no submission was found for this portal" do
      portal = Portal.create! valid_attributes
      submission  = create :submission
      allow(request.env).to receive(:[]).and_call_original
      allow(request.env).to receive(:[]).with('HTTP_X_WEBHOOKER_SUBMISSION_ID').and_return submission.id
      get :route, {:id => portal.to_param}, valid_session
      expect(response).to be_not_found
    end
  end
end
